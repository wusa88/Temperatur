#Sensor IDs
#28-0000053c5e59 (normaler Sensor)
#28-00000628848d
#28-00000615380c  
#28-0000061558bf  
#28-0000061568d8
#28-000006152b5d  
#28-000006151d22
#28-000006269c84
#28-000006156279
#28-00000615025b
#28-000006157b8c

import subprocess
import sys
import os
from time import *
import sqlite3

plot = "/home/pi/Desktop/programme/plot.plt"
gnuplot = "/usr/bin/gnuplot"
dbname = '/var/www/db.sqlite'

#sensorbuero = ("/sys/bus/w1/devices/28-0000053c5e59/w1_slave")
a = ("/sys/bus/w1/devices/28-00000628848d/w1_slave")
b = ("/sys/bus/w1/devices/28-00000615380c/w1_slave")
c = ("/sys/bus/w1/devices/28-0000061558bf/w1_slave")
d = ("/sys/bus/w1/devices/28-0000061568d8/w1_slave")
e = ("/sys/bus/w1/devices/28-000006152b5d/w1_slave")
f = ("/sys/bus/w1/devices/28-000006151d22/w1_slave")
g = ("/sys/bus/w1/devices/28-000006269c84/w1_slave")
h = ("/sys/bus/w1/devices/28-000006156279/w1_slave")
i = ("/sys/bus/w1/devices/28-00000615025b/w1_slave")
j = ("/sys/bus/w1/devices/28-000006157b8c/w1_slave")

lt = localtime()
#Sensor buero
#buero = open(sensorbuero)
#tfile = buero.read()
#buero.close()
#tempdata = tfile.split("\n")[1].split(" ")[9]
#temp = float(tempdata[2:])
#temp = temp / 1000
#temp = round(temp,2)
#temp = str(temp)

#time.sleep(0.2)

#Sensor
sen1 = open(a)
tfile1 = sen1.read()
sen1.close()
tempdata = tfile1.split("\n")[1].split(" ")[9]
sentemp1 = float(tempdata[2:])
sentemp1 = sentemp1 / 1000
sensortemp1 = round(sentemp1,2)
print type(sensortemp1)
sensortemp1 = str(sensortemp1)

#sleep(0.2)

#Sensor
sen2 = open(b)
tfile2 = sen2.read()
sen2.close()
tempdata = tfile2.split("\n")[1].split(" ")[9]
temp2 = float(tempdata[2:])
temp2 = temp2 / 1000
temp2 = round(temp2,2)
temp2 = str(temp2)

#sleep(0.2)

#Sensor
sen3= open(c)
tfile3 = sen3.read()
sen3.close()
tempdata = tfile3.split("\n")[1].split(" ")[9]
temp3 = float(tempdata[2:])
temp3= temp3 / 1000
temp3 = round(temp3,2)
temp3 = str(temp3)
#sleep(0.2)

#Sensor
sen4= open(d)
tfile4 = sen4.read()
sen4.close()
tempdata = tfile4.split("\n")[1].split(" ")[9]
temp4 = float(tempdata[2:])
temp4 = temp4 / 1000
temp4 = round(temp4,2)
temp4 = str(temp4)
#sleep(0.2)

#Sensor
sen5 = open(e)
tfile5= sen5.read()
sen5.close()
tempdata = tfile5.split("\n")[1].split(" ")[9]
temp5 = float(tempdata[2:])
temp5 = temp5 / 1000
temp5 = round(temp5,2)
temp5 = str(temp5)
#sleep(0.2)

#Sensor
sen6= open(f)
tfile6 = sen6.read()
sen6.close()
tempdata = tfile6.split("\n")[1].split(" ")[9]
temp6 = float(tempdata[2:])
temp6 = temp6 / 1000
temp6 = round(temp6,2)
temp6 = str(temp6)
#sleep(0.2)

#Sensor
sen7= open(g)
tfile7 = sen7.read()
sen7.close()
tempdata = tfile7.split("\n")[1].split(" ")[9]
temp7 = float(tempdata[2:])
temp7 = temp7 / 1000
temp7 = round(temp7,2)
temp7 = str(temp7)
#sleep(0.2)

#Sensor
sen8= open(h)
tfile8 = sen8.read()
sen8.close()
tempdata = tfile8.split("\n")[1].split(" ")[9]
temp8 = float(tempdata[2:])
temp8= temp8 / 1000
temp8 = round(temp8,2)
temp8 = str(temp8)
#sleep(0.2)

#Sensor
sen9= open(i)
tfile9 = sen9.read()
sen9.close()
tempdata = tfile9.split("\n")[1].split(" ")[9]
temp9 = float(tempdata[2:])
temp9 = temp9 / 1000
temp9 = round(temp9,2)
temp9 = str(temp9)
#sleep(0.2)

#Sensor
sen10= open(j)
tfile10 = sen10.read()
sen10.close()
tempdata = tfile10.split("\n")[1].split(" ")[9]
temp10 = float(tempdata[2:])
temp10 = temp10 / 1000
temp10 = round(temp10,2)
temp10 = str(temp10)

#log_temp()

#Datum = strftime("%d.%m.%Y")
#Uhrzeit = strftime ("%H:%M:%S")
#fobj_out = open ("/home/pi/Desktop/programme/tempkomplett.txt","a")
#fobj_out.write("\n" + Datum + "_" + Uhrzeit + ";" + temp1 + ";"  + temp2 + ";"  + temp3 + ";"  + temp4 + ";"  + temp5 + ";"  + temp6 + ";" + temp7 +";" + temp8 + ";"  + temp9 + ";" + temp10 + ";")
#fobj_out.close()
#subprocess.call([gnuplot, plot], stdout=subprocess.PIPE)

conn = sqlite3.connect(dbname)
print "open db ok"
c = conn.cursor()
sql_command = ('''create table if not exists temp (id integer PRIMARY KEY AUTOINCREMENT, zeit DATETIME DEFAULT CURRENT_TIMESTAMP, temp1 NUMERIC)''');
c.execute(sql_command)
print "Tabelle erstelle!"

c.execute("INSERT INTO temp(temp1) values" (sensortemp1))
conn.commit()
conn.close()

#if __name__=="__main__":
#	main()

